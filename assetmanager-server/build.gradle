buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "nu.studer:gradle-jooq-plugin:${revJooqplugin}"
        classpath "com.github.michaelruocco:embedded-mysql-plugin:${revEmbeddedmysql}"
        classpath "org.flywaydb:flyway-gradle-plugin:${revFlyway}"
        classpath "mysql:mysql-connector-java:${revMysql}"
    }
}

apply plugin: 'nu.studer.jooq'
apply plugin: 'embedded-mysql'
apply plugin: 'org.flywaydb.flyway'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // swagger
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

	// jooq
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.jooq:jooq:3.11.11'
    implementation 'org.jooq:jooq-meta:3.11.11'
    implementation 'org.jooq:jooq-codegen:3.11.11'
    jooqRuntime 'mysql:mysql-connector-java:8.0.17'

    // Hikari Connection Pool
    implementation 'com.zaxxer:HikariCP:3.3.1'

    // Flyway
    implementation 'org.flywaydb:flyway-core:5.2.4'

	// mysql
	implementation 'mysql:mysql-connector-java:8.0.17'

    testImplementation("org.spockframework:spock-core:1.0-groovy-2.4")
    testImplementation("org.spockframework:spock-spring:1.0-groovy-2.4")

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

def jdbcDriver = 'com.mysql.cj.jdbc.Driver'
def jdbcUrl = 'jdbc:mysql://localhost:13306/assetmanager'
def jdbcUsername = 'testuser'
def jdbcPassword = 'password'

jooq {
    assetmanager(sourceSets.main) {
        jdbc {
            driver = jdbcDriver
            url = jdbcUrl
            user = jdbcUsername
            password = jdbcPassword
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                includes = 'assetmanager.*'
                excludes = 'assetmanager.flyway_schema_history'
            }
            generate {
                daos = true
                relations = true
                records = true
                immutablePojos = false
                fluentSetters = true
                pojosEqualsAndHashCode = true
            }
            target {
                packageName = 'com.apnatimeaayeaga.assetmanager.jooq.generated'
            }
        }
    }
}

// flyway config
flyway {
    driver = jdbcDriver
    url = jdbcUrl
    user = jdbcUsername
    password = jdbcPassword
}

// use an embedded MySQL for codegen and tests
embeddedMysql {
    url = jdbcUrl
    username = jdbcUsername
    password = jdbcPassword
    version = 'v5_7_latest'
    serverCharset = 'utf8'
    serverCollate = 'utf8_general_ci'
}

// make sure that codegen and schema migration start/stop embedded DB
generateAssetmanagerJooqSchemaSource.dependsOn flywayMigrate
generateAssetmanagerJooqSchemaSource.finalizedBy stopEmbeddedMysql
flywayInfo.dependsOn startEmbeddedMysql
flywayMigrate.dependsOn flywayInfo
flywayMigrate.finalizedBy stopEmbeddedMysql
flywayInfo.finalizedBy stopEmbeddedMysql
